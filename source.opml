<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Thu, 21 Aug 2025 16:27:54 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes https://drummer.land. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: davemaillist</title>
		<dateCreated>Mon, 26 Aug 2019 19:41:10 GMT</dateCreated>
		<dateModified>Thu, 21 Aug 2025 16:27:54 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 3</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>157</windowTop>
		<windowLeft>776</windowLeft>
		<windowBottom>1162</windowBottom>
		<windowRight>2144</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/davemaillist/">
			<outline text="worknotes.md" created="Sat, 26 Apr 2025 18:38:18 GMT">
				<outline text="#### 8/21/25; 10:44:24 AM by DW" created="Thu, 21 Aug 2025 14:44:23 GMT">
					<outline text="Adding a captcha to the page because we're being abused." created="Thu, 21 Aug 2025 14:44:24 GMT"/>
					<outline text="In maillist.js it now looks for the captcha code in the params and sends them off to google to validate, if it says yes, we send the confirming email, if not, it's an error." created="Thu, 21 Aug 2025 14:45:09 GMT"/>
					<outline text="The client side is in subscribe.scripting.com, also included below. We include a bit of code from google in the page, and when the user clicks the subscribe button we ask google what the captcha code is and send it along to the server. " created="Thu, 21 Aug 2025 16:20:12 GMT"/>
					<outline text="captchaSecretKey is in config.json on the server." created="Thu, 21 Aug 2025 16:24:01 GMT"/>
					<outline text="The &quot;site key&quot; is embedded in the html source of index.html (it's the public key)." created="Thu, 21 Aug 2025 16:27:06 GMT"/>
					</outline>
				<outline text="#### 8/18/25; 8:52:12 PM by DW" created="Tue, 19 Aug 2025 00:52:12 GMT">
					<outline text="How to hand-edit the mail list." created="Tue, 19 Aug 2025 00:52:13 GMT">
						<outline text="* On the maine server look in maine/pagepark/domains/maillist2.scripting.com/data/emailPrefs.json." created="Tue, 19 Aug 2025 00:52:21 GMT"/>
						<outline text="* Open it in nano." created="Tue, 19 Aug 2025 00:53:35 GMT"/>
						<outline text="* Carefully make the change. " created="Tue, 19 Aug 2025 00:53:42 GMT"/>
						<outline text="* Save it." created="Tue, 19 Aug 2025 00:53:48 GMT"/>
						<outline text="* Restart the server so it reads the changed file." created="Tue, 19 Aug 2025 00:53:53 GMT"/>
						<outline text="* In the browser go to subscribe.scripting.com, and subscribe to an account. Confirm the subscription in the email it sends. " created="Tue, 19 Aug 2025 00:54:03 GMT"/>
						<outline text="* This will cause emailPrefs.json to be saved to a location on S3, /scripting/davemaillist/emailPrefs.json. You can open it to verify your changes got through in time for the next update. " created="Tue, 19 Aug 2025 00:55:41 GMT"/>
						</outline>
					</outline>
				<outline text="#### 4/26/25; 2:38:24 PM by DW" created="Sat, 26 Apr 2025 18:38:23 GMT">
					<outline text="Getting everything off montana server, very old version of pagepark, and i can't change code up there, dropbox is turned off." created="Sat, 26 Apr 2025 18:38:24 GMT"/>
					<outline text="For a full map see the first worknote in the scriptingNightlyEmail2 project" created="Sun, 27 Apr 2025 13:38:58 GMT"/>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;davemaillist&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Manages the nightly mail function on Scripting News.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.7&quot;,"/>
					<outline text="&quot;main&quot;: &quot;maillist.js&quot;,"/>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot;: &quot;git&quot;,"/>
						<outline text="&quot;url&quot;: &quot;https://github.com/scripting/maillist.git&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davehttp&quot;: &quot;*&quot;,"/>
						<outline text="&quot;aws-sdk&quot;: &quot;*&quot;,"/>
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davemail&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="emailtemplate.html">
				<outline text="&lt;html&gt; ">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;[%title%]&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="&lt;style&gt;" isComment="true">
							<outline text="body {">
								<outline text="}"/>
								</outline>
							<outline text=".divPageBody {">
								<outline text="color: black;"/>
								<outline text="background-color: whitesmoke;" isComment="true"/>
								<outline text="}"/>
								</outline>
							<outline text="&lt;/style&gt;"/>
							</outline>
						<outline text="&lt;script&gt;" isComment="true" created="Thu, 12 Dec 2013 17:06:51 GMT" pgfnum="33502">
							<outline text="function everySecond () {">
								<outline text="}"/>
								</outline>
							<outline text="function startup () {">
								<outline text="console.log (&quot;startup&quot;);"/>
								<outline text="self.setInterval (function () {everySecond ()}, 1000); "/>
								<outline text="}"/>
								</outline>
							<outline text="&lt;/script&gt;" created="Thu, 12 Dec 2013 17:07:17 GMT" pgfnum="33504"/>
							</outline>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;p&gt;Click the link below to confirm[%operationToConfirm%].&lt;/p&gt;"/>
							<outline text="&lt;p&gt;&lt;a href=&quot;[%confirmationUrl%]&quot;&gt;[%confirmationUrl%]&lt;/a&gt;&lt;/p&gt;"/>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;" isComment="true">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			<outline text="maillist.js">
				<outline text="const myProductName = &quot;davemaillist&quot;, myVersion = &quot;0.4.7&quot;; "/>
				<outline text=""/>
				<outline text="const AWS = require (&quot;aws-sdk&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const mail = require (&quot;davemail&quot;);"/>
				<outline text="const davehttp = require (&quot;davehttp&quot;); "/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text=""/>
				<outline text="exports.sendConfirmingEmail = sendConfirmingEmail;"/>
				<outline text="exports.confirmEmailCode = confirmEmailCode;"/>
				<outline text="exports.emailUnsub = emailUnsub;" isComment="true"/>
				<outline text="exports.start = start;"/>
				<outline text=""/>
				<outline text="var config = {">
					<outline text="fnameStats: &quot;data/stats.json&quot;,"/>
					<outline text="dataFolder: &quot;data/&quot;, "/>
					<outline text="fnameEmailTemplate: &quot;emailtemplate.html&quot;, "/>
					<outline text="ctSecsConfirmationTimeout: 30 * 60,"/>
					<outline text="ctSecsConfirmationTimeout: 5 * 60," isComment="true"/>
					<outline text="fnameEmailPrefs: &quot;data/emailPrefs.json&quot;, "/>
					<outline text="pathPrefsArchive: &quot;data/archive/&quot;,"/>
					<outline text="blogTitle: &quot;Scripting News&quot;, "/>
					<outline text="confirmSubscribeSubject: &quot;Please confirm your email address&quot;,"/>
					<outline text="confirmUnsubSubject: &quot;Confirm to unsubscribe&quot;,"/>
					<outline text="confirmOperationSubscribe: &quot; your subscription&quot;,"/>
					<outline text="confirmOperationUnsub: &quot;&quot;,"/>
					<outline text="httpPort: 1401,"/>
					<outline text="flLogToConsole: true, "/>
					<outline text="flAllowAccessFromAnywhere: true, "/>
					<outline text="flPostEnabled: false, "/>
					<outline text="captchaSecretKey: undefined //8/21/25 by DW" created="Thu, 21 Aug 2025 15:43:32 GMT"/>
					<outline text="};"/>
					</outline>
				<outline text="const fnameConfig = &quot;config.json&quot;;"/>
				<outline text=""/>
				<outline text="var stats = {">
					<outline text="productName: myProductName,"/>
					<outline text="version: myVersion,"/>
					<outline text="ctSubscriptions: 0,"/>
					<outline text="whenLastSubscribe: new Date (0),"/>
					<outline text="ctStartups: 0,"/>
					<outline text="whenLastStartup: new Date (0),"/>
					<outline text="ctHits: 0,"/>
					<outline text="whenLastHit: new Date (0),"/>
					<outline text="ctHitsThisRun: 0,"/>
					<outline text="pendingConfirmations: new Array () "/>
					<outline text="};"/>
					</outline>
				<outline text="var flStatsChanged = false;"/>
				<outline text="" created="Thu, 21 Aug 2025 15:41:29 GMT"/>
				<outline text="" created="Thu, 21 Aug 2025 15:41:29 GMT"/>
				<outline text=""/>
				<outline text="function statsChanged () {">
					<outline text="flStatsChanged = true;"/>
					<outline text="}"/>
					</outline>
				<outline text="function addOrRemoveSubscription (obj) {">
					<outline text="Changes" isComment="true">
						<outline text="11/18/19; 4:50:42 PM by DW">
							<outline text="Save a daily archive."/>
							</outline>
						<outline text="8/30/19; 3:11:43 PM by DW">
							<outline text="Maintain stats.ctSubscriptions, stats.whenLastSubscribe."/>
							</outline>
						<outline text="8/30/19; 11:11:13 AM by DW">
							<outline text="email addresses are case insensitive. Dave.winer@gmail.com is the same as dave.winer@gmail.com."/>
							<outline text="if the address uses any uppercase letter, store a property called emailActual which is what you should send the email to."/>
							</outline>
						<outline text="8/27/19; 9:59:47 AM by DW">
							<outline text="Remove the flAdd param, the operation, whether you'r subbing or unsubbing is now included in the obj. "/>
							</outline>
						<outline text="8/26/19; 11:49:25 AM by DW">
							<outline text="The structure of the list changes.">
								<outline text="The key is the email address. "/>
								<outline text="Properties are enabled and when. "/>
								</outline>
							</outline>
						</outline>
					<outline text="obj == {" isComment="true">
						<outline text="&quot;magicString&quot;: &quot;hjzb52e1ar&quot;,"/>
						<outline text="&quot;urlWebApp&quot;: &quot;http://maillist.scripting.com/&quot;,"/>
						<outline text="&quot;email&quot;: &quot;dave@scripting.com&quot;,"/>
						<outline text="&quot;flSub&quot;: true,"/>
						<outline text="&quot;when&quot;: &quot;2019-08-27T13:55:17.481Z&quot;,"/>
						<outline text="&quot;whenConfirmed&quot;: &quot;2019-08-27T13:55:54.149Z&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="var f = config.fnameEmailPrefs, now = new Date ();"/>
					<outline text="function countSubs (theList) {">
						<outline text="var ct = 0;"/>
						<outline text="for (var x in theList) {">
							<outline text="if (theList [x].enabled) {">
								<outline text="ct++;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (ct);"/>
						<outline text="}"/>
						</outline>
					<outline text="utils.sureFilePath (f, function () {">
						<outline text="fs.readFile (f, function (err, data) {">
							<outline text="var theList = new Object ();"/>
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="theList = JSON.parse (data);"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="var key = obj.email.toLowerCase ();"/>
							<outline text="theList [key] = {">
								<outline text="when: now.toLocaleString (),"/>
								<outline text="enabled: obj.flSub"/>
								<outline text="};"/>
								</outline>
							<outline text="if (obj.email != key) { //it has some uppercase chars">
								<outline text="theList [key].emailActual = obj.email;"/>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="stats.ctSubscriptions = countSubs (theList); //8/30/19 by DW"/>
							<outline text="stats.whenLastSubscribe = now;"/>
							<outline text="statsChanged ();"/>
							<outline text="console.log (&quot;addOrRemoveSubscription: stats.ctSubscriptions == &quot; + stats.ctSubscriptions + &quot;, stats.whenLastSubscribe == &quot; + stats.whenLastSubscribe);" isComment="true"/>
							<outline text=""/>
							<outline text="theList [obj.screenName] = {" isComment="true">
								<outline text="email: obj.email,"/>
								<outline text="enabled: flAdd"/>
								<outline text="};"/>
								</outline>
							<outline text="fs.writeFile (f, utils.jsonStringify (theList), function (err) {">
								<outline text="});"/>
								</outline>
							<outline text=""/>
							<outline text="var farchive = config.pathPrefsArchive + utils.getDatePath (now, false) + &quot;.json&quot;; //11/18/19 by DW"/>
							<outline text="utils.sureFilePath (farchive, function () {">
								<outline text="fs.writeFile (farchive, utils.jsonStringify (theList), function (err) {">
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="//old version -- maintains a mailPrefs.json file in each users' folder" isComment="true">
						<outline text="var f = config.dataFolder + obj.screenName + &quot;/&quot; + config.emailPrefsFname;"/>
						<outline text="var now = new Date ();"/>
						<outline text="utils.sureFilePath (f, function () {">
							<outline text="fs.readFile (f, function (err, data) {">
								<outline text="var prefs = {">
									<outline text="ctUpdates: 0,"/>
									<outline text="whenCreated: now"/>
									<outline text="};"/>
									</outline>
								<outline text="if (!err) {">
									<outline text="var jstruct = JSON.parse (data);"/>
									<outline text="for (x in jstruct) {">
										<outline text="prefs [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="prefs.enabled = true;"/>
								<outline text="prefs.email = obj.email;"/>
								<outline text="prefs.urlWebApp = obj.urlWebApp;"/>
								<outline text="prefs.whenUpdated = now;"/>
								<outline text="prefs.ctUpdates++;"/>
								<outline text="fs.writeFile (f, utils.jsonStringify (prefs), function (err) {">
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function timeoutEmailConfirmations () { //delete pending confirmations that are too old">
					<outline text="for (var i = stats.pendingConfirmations.length - 1; i &gt;= 0; i--) {">
						<outline text="var obj = stats.pendingConfirmations [i];"/>
						<outline text="if (utils.secondsSince (obj.when) &gt; config.ctSecsConfirmationTimeout) {">
							<outline text="console.log (&quot;timeoutEmailConfirmations: obj == &quot; + utils.jsonStringify (obj));"/>
							<outline text="stats.pendingConfirmations.splice (i, 1);"/>
							<outline text="statsChanged ();"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getRandomPassword (ctchars) { //NPM is refusing the recognize package updates, so I'm replicating code ugh" created="Wed, 23 Jan 2013 15:14:04 GMT" pgfnum="17535">
					<outline text="var s= &quot;&quot;, ch;"/>
					<outline text="while (s.length &lt; ctchars)  {">
						<outline text="ch = String.fromCharCode (utils.random (33, 122));"/>
						<outline text="if (utils.isAlpha (ch) || utils.isNumeric (ch)) {" created="Wed, 11 Jan 2006 12:42:53 GMT">
							<outline text="s += ch;"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (s.toLowerCase ());"/>
					<outline text="}"/>
					</outline>
				<outline text="function sendConfirmingEmail (email, urlWebApp, flSub, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="8/27/19; 9:14:53 AM by DW">
							<outline text="Allow this routine to be used to send confirmations for subs or unsubs.">
								<outline text="new param, flSub, if true we subscribe, otherwise unsub."/>
								</outline>
							</outline>
						<outline text="8/26/19; 11:45:09 AM by DW">
							<outline text="Remove the screenName parameter, no longer requiring identity to use mail list."/>
							</outline>
						</outline>
					<outline text="console.log (&quot;sendConfirmingEmail: email == &quot; + email + &quot;, flSub == &quot; + flSub + &quot;, urlWebApp == &quot; + urlWebApp);"/>
					<outline text="var magicString = getRandomPassword (10);"/>
					<outline text="if (utils.endsWith (urlWebApp, &quot;#&quot;)) { //delete # at end of url if present">
						<outline text="urlWebApp = utils.stringDelete (urlWebApp, urlWebApp.length, 1); "/>
						<outline text="}"/>
						</outline>
					<outline text="var obj = {">
						<outline text="magicString: magicString,"/>
						<outline text="urlWebApp: urlWebApp,"/>
						<outline text="email: email,"/>
						<outline text="flSub: flSub,"/>
						<outline text="when: new Date ()"/>
						<outline text="};"/>
						</outline>
					<outline text="stats.pendingConfirmations.push (obj);"/>
					<outline text="statsChanged ();"/>
					<outline text="console.log (&quot;sendConfirmingEmail: obj == &quot; + utils.jsonStringify (obj));"/>
					<outline text="var params = {">
						<outline text="title: (flSub) ? config.confirmSubscribeSubject : config.confirmUnsubSubject,"/>
						<outline text="blogTitle: config.blogTitle,"/>
						<outline text="operationToConfirm: (flSub) ? config.confirmOperationSubscribe : config.confirmOperationUnsub,"/>
						<outline text="confirmationUrl: urlWebApp + &quot;?emailConfirmCode=&quot; + encodeURIComponent (magicString)"/>
						<outline text="};"/>
						</outline>
					<outline text="fs.readFile (config.fnameEmailTemplate, function (err, emailTemplate) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;sendConfirmingEmail: err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var mailtext = utils.multipleReplaceAll (emailTemplate.toString (), params, false, &quot;[%&quot;, &quot;%]&quot;);"/>
							<outline text="mail.send (email, params.title, mailtext, &quot;dave@scripting.com&quot;, function (err, data) {">
								<outline text="if (err) {">
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="callback (undefined, obj);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="fs.writeFile (&quot;data/lastmail.html&quot;, mailtext, function (err) {">
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function confirmEmailCode (theCode, callback) {">
					<outline text="var flfound = false;"/>
					<outline text="console.log (&quot;confirmEmailCode: theCode == &quot; + theCode);"/>
					<outline text="stats.pendingConfirmations.forEach (function (obj) {">
						<outline text="if (obj.magicString == theCode) {">
							<outline text="obj.whenConfirmed = new Date ();"/>
							<outline text="addOrRemoveSubscription (obj);"/>
							<outline text="console.log (&quot;confirmEmailCode: obj == &quot; + utils.jsonStringify (obj));"/>
							<outline text="callback (undefined, obj);"/>
							<outline text="flfound = true;"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="if (!flfound) {">
						<outline text="callback ({message: &quot;The code is not valid or has expired.&quot;});"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function verifyRecaptcha (captchaResponse, callback) { //8/21/25 by DW">
					<outline text="request.post ({">
						<outline text="url: &quot;https://www.google.com/recaptcha/api/siteverify&quot;,"/>
						<outline text="form: {">
							<outline text="secret: config.captchaSecretKey,"/>
							<outline text="response: captchaResponse"/>
							<outline text="}"/>
							</outline>
						<outline text="}, function (err, res, body) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;verifyRecaptcha: err.message == &quot; + err.message);" created="Thu, 21 Aug 2025 15:52:27 GMT"/>
								<outline text="callback (err);"/>
								<outline text="return;"/>
								<outline text="}"/>
								</outline>
							<outline text="console.log (&quot;verifyRecaptcha: body == &quot; + body);" created="Thu, 21 Aug 2025 15:52:27 GMT"/>
							<outline text="const result = JSON.parse (body);"/>
							<outline text="callback (undefined, result.success);"/>
							<outline text="});"/>
							</outline>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function emailUnsub (email, callback) {" isComment="true">
					<outline text="Changes" isComment="true">
						<outline text="8/26/19; 11:56:28 AM by DW">
							<outline text="Todo -- just send a confirming email to the address, and prepare to receive a code."/>
							</outline>
						</outline>
					<outline text="davetwitter.getScreenName (token, secret, function (screenName) {" isComment="true">
						<outline text="if (screenName === undefined) {">
							<outline text="callback ({message: &quot;Can't unsub because the accessToken is not valid.&quot;});    "/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var obj = {">
								<outline text="screenName: screenName, "/>
								<outline text="email: &quot;&quot;"/>
								<outline text="};"/>
								</outline>
							<outline text="addOrRemoveSubscription (obj, false);"/>
							<outline text="callback (undefined, obj);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function handleHttpRequest (theRequest) {">
					<outline text="var params = theRequest.params;"/>
					<outline text=""/>
					<outline text="stats.ctHits++;"/>
					<outline text="stats.ctHitsThisRun++;"/>
					<outline text="stats.whenLastHit = new Date ();"/>
					<outline text="statsChanged ();"/>
					<outline text=""/>
					<outline text="function returnPlainText (s) {" isComment="true">
						<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, s.toString ());"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnData (jstruct) {">
						<outline text="console.log (&quot;returnData: jstruct == &quot; + utils.jsonStringify (jstruct));" isComment="true"/>
						<outline text="if (jstruct === undefined) {">
							<outline text="jstruct = {};"/>
							<outline text="}"/>
							</outline>
						<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnHtml (htmltext) {" isComment="true">
						<outline text="theRequest.httpReturn (200, &quot;text/html&quot;, htmltext);"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnXml (xmltext) {" isComment="true">
						<outline text="theRequest.httpReturn (200, &quot;text/xml&quot;, xmltext);"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnNotFound () {">
						<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, &quot;Not found.&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnError (jstruct) {">
						<outline text="console.log (&quot;returnError: jstruct == &quot; + utils.jsonStringify (jstruct));"/>
						<outline text="theRequest.httpReturn (500, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
						<outline text="}"/>
						</outline>
					<outline text="function httpReturn (err, jstruct) {">
						<outline text="if (err) {">
							<outline text="returnError (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="returnData (jstruct);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function httpReturnHtml (err, htmltext) {" isComment="true">
						<outline text="if (err) {">
							<outline text="returnError (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="theRequest.httpReturn (200, &quot;text/html&quot;, htmltext);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function returnRedirect (url, code) {" isComment="true">
						<outline text="if (code === undefined) {">
							<outline text="code = 302;"/>
							<outline text="}"/>
							</outline>
						<outline text="theRequest.httpReturn (code, &quot;text/plain&quot;, code + &quot; REDIRECT&quot;);"/>
						<outline text="}"/>
						<outline text=""/>
						</outline>
					<outline text="function returnFeedInfo (feedUrl) {" isComment="true">
						<outline text="getFeedInfoFromDatabase (feedUrl, function (err, result) {">
							<outline text="console.log (&quot;returnFeedInfo: result == &quot; + utils.jsonStringify (result));"/>
							<outline text="httpReturn (err, result);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getSqlResult (sqltext, callback) {" isComment="true">
						<outline text="theSqlConnectionPool.getConnection (function (err, connection) {">
							<outline text="if (err) {">
								<outline text="httpReturn (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="connection.query (sqltext, function (err, result) {">
									<outline text="connection.release ();"/>
									<outline text="httpReturn (err, result);"/>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function returnServerHomePage () { //return true if we handled it" isComment="true">
						<outline text="if (config.urlServerHomePageSource === undefined) {">
							<outline text="return (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="if (utils.secondsSince (whenLastHomepageRead) &gt; config.ctSecsHomepageCache) {">
							<outline text="request (config.urlServerHomePageSource, function (error, response, htmltext) {">
								<outline text="if (!error &amp;&amp; response.statusCode == 200) {">
									<outline text="console.log (&quot;returnServerHomePage: read cached home page text, &quot; + htmltext.length + &quot; chars.&quot;);" isComment="true"/>
									<outline text="homepageCache = htmltext;"/>
									<outline text="whenLastHomepageRead = new Date ();"/>
									<outline text="returnHtml (htmltext);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="returnNotFound ();"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="returnHtml (homepageCache);"/>
							<outline text="}"/>
							</outline>
						<outline text="return (true);"/>
						<outline text="}"/>
						</outline>
					<outline text="function updateUserOpml (screenname) { //code was repeating, factored here" isComment="true">
						<outline text="uploadUserOpmlToS3 (screenname, function (err, result) {">
							<outline text="httpReturn (err, result);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function callWithScreenname (callback) {" isComment="true">
						<outline text="davetwitter.getScreenName (token, secret, function (screenname) {" created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784">
							<outline text="if (screenname === undefined) {" created="Thu, 10 Jul 2014 00:53:00 GMT" pgfnum="42793">
								<outline text="returnError ({message: &quot;Can't do the thing you want because the accessToken is not valid.&quot;});    "/>
								<outline text="}" created="Thu, 10 Jul 2014 00:53:11 GMT" pgfnum="42797"/>
								</outline>
							<outline text="else {" created="Thu, 10 Jul 2014 00:53:12 GMT" pgfnum="42798">
								<outline text="callback (screenname);"/>
								<outline text="}" created="Thu, 10 Jul 2014 00:53:14 GMT" pgfnum="42799"/>
								</outline>
							<outline text="});" created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function returnStats () {">
						<outline text="var briefStats = new Object ();"/>
						<outline text="utils.copyScalars (stats, briefStats);"/>
						<outline text="returnData (briefStats);"/>
						<outline text="}"/>
						</outline>
					<outline text="switch (theRequest.method) {">
						<outline text="case &quot;GET&quot;:">
							<outline text="switch (theRequest.lowerpath) {">
								<outline text="case &quot;/&quot;:">
									<outline text="confirmEmailCode (params.emailConfirmCode, httpReturn);"/>
									<outline text="return (true);"/>
									</outline>
								<outline text="case &quot;/confirmemail&quot;: " created="Tue, 22 Jul 2014 18:44:25 GMT" pgfnum="43030">
									<outline text="console.log (&quot;confirmemail: params == &quot; + utils.jsonStringify (params));" created="Thu, 21 Aug 2025 15:32:41 GMT"/>
									<outline text="verifyRecaptcha (params.captcharesponse, function (err, flVerified) { //8/21/25 by DW" created="Thu, 21 Aug 2025 15:41:30 GMT">
										<outline text="if (err) {" created="Thu, 21 Aug 2025 15:49:01 GMT">
											<outline text="returnError (err);" created="Thu, 21 Aug 2025 15:50:28 GMT"/>
											<outline text="}" created="Thu, 21 Aug 2025 15:49:04 GMT"/>
											</outline>
										<outline text="else {" created="Thu, 21 Aug 2025 15:49:05 GMT">
											<outline text="if (flVerified) {" created="Thu, 21 Aug 2025 15:50:35 GMT">
												<outline text="sendConfirmingEmail (params.email, params.urlwebapp, utils.getBoolean (params.subscribe), httpReturn);"/>
												<outline text="}" created="Thu, 21 Aug 2025 15:50:39 GMT"/>
												</outline>
											<outline text="else {" created="Thu, 21 Aug 2025 15:50:40 GMT">
												<outline text="const message = &quot;The captcha thing says you're not human. Sorry.&quot;;" created="Thu, 21 Aug 2025 15:50:52 GMT"/>
												<outline text="returnError ({message});" created="Thu, 21 Aug 2025 15:50:28 GMT"/>
												<outline text="}" created="Thu, 21 Aug 2025 15:50:41 GMT"/>
												</outline>
											<outline text="}" created="Thu, 21 Aug 2025 15:49:07 GMT"/>
											</outline>
										<outline text="});" created="Thu, 21 Aug 2025 15:48:51 GMT"/>
										</outline>
									<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
									</outline>
								<outline text="case &quot;/confirmemailcode&quot;: ">
									<outline text="confirmEmailCode (params.code, httpReturn);"/>
									<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
									</outline>
								<outline text="case &quot;/emailunsub&quot;: " isComment="true">
									<outline text="emailUnsub (params.email, httpReturn);"/>
									<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
									</outline>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (false); //we didn't handle it"/>
					<outline text="}"/>
					</outline>
				<outline text="" created="Thu, 21 Aug 2025 15:32:30 GMT"/>
				<outline text="function readConfig (callback) {">
					<outline text="utils.sureFilePath (fnameConfig, function () {">
						<outline text="fs.readFile (fnameConfig, function (err, data) {">
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (data.toString ());"/>
									<outline text="console.log (utils.jsonStringify (jstruct)); " isComment="true"/>
									<outline text="for (var x in jstruct) {">
										<outline text="config [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;readConfig: err == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readStats (callback) {">
					<outline text="utils.sureFilePath (config.fnameStats, function () {">
						<outline text="fs.readFile (config.fnameStats, function (err, data) {">
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (data.toString ());"/>
									<outline text="console.log (utils.jsonStringify (jstruct)); " isComment="true"/>
									<outline text="for (var x in jstruct) {">
										<outline text="stats [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;readStats: err == &quot; + err.message);" isComment="true"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function writeStats (callback) {">
					<outline text="utils.sureFilePath (config.fnameStats, function () {">
						<outline text="fs.writeFile (config.fnameStats, utils.jsonStringify (stats), function (err) {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function everyMinute () {">
					<outline text="}"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="timeoutEmailConfirmations ();"/>
					<outline text="if (flStatsChanged) {">
						<outline text="flStatsChanged = false;"/>
						<outline text="writeStats ();"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function start (configParam, callback) {">
					<outline text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot;\n&quot;);"/>
					<outline text="readConfig (function () {">
						<outline text="if (configParam !== undefined) {">
							<outline text="for (x in configParam) {">
								<outline text="config [x] = configParam [x];"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="console.log (myProductName + &quot;.start: config == &quot; + utils.jsonStringify (config));"/>
						<outline text="readStats (function () {">
							<outline text="stats.productName = myProductName;"/>
							<outline text="stats.version = myVersion;"/>
							<outline text="stats.whenLastStartup = new Date ();"/>
							<outline text="stats.ctStartups++;"/>
							<outline text="stats.ctHitsThisRun = 0;"/>
							<outline text="statsChanged ();"/>
							<outline text=""/>
							<outline text="var httpConfig = {">
								<outline text="port: config.httpPort,"/>
								<outline text="flLogToConsole: config.flLogToConsole,"/>
								<outline text="flAllowAccessFromAnywhere: config.flAllowAccessFromAnywhere,"/>
								<outline text="flPostEnabled: config.flPostEnabled"/>
								<outline text="};"/>
								</outline>
							<outline text="davehttp.start (httpConfig, handleHttpRequest);"/>
							<outline text="setInterval (everySecond, 1000); "/>
							<outline text="utils.runEveryMinute (everyMinute);"/>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="readme.md">
				<outline text="Manages the nightly mail function on Scripting News."/>
				</outline>
			<outline text="example/package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;test&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Test app for davemaillist.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave.winer@gmail.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davehttp&quot;: &quot;*&quot;,"/>
						<outline text="&quot;aws-sdk&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davemail&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="example/test.js">
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const maillist = require (&quot;../maillist.js&quot;);"/>
				<outline text="const davehttp = require (&quot;davehttp&quot;);"/>
				<outline text=""/>
				<outline text="const myConfig = {">
					<outline text="fnameEmailTemplate: &quot;../emailtemplate.html&quot;"/>
					<outline text="};"/>
					</outline>
				<outline text="maillist.start (myConfig, function () {">
					<outline text="console.log (&quot;started&quot;);" isComment="true"/>
					<outline text="maillist.sendConfirmingEmail (&quot;dave.winer@gmail.com&quot;, &quot;http://scripting.com/email/&quot;, function (err, data) {" isComment="true">
						<outline text="if (err) {">
							<outline text="console.log (err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="console.log (data);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="});"/>
					</outline>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				</outline>
			<outline text="backup/package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;test&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Test app for davemaillist.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave.winer@gmail.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daves3&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="backup/backup.js">
				<outline text="const s3 = require (&quot;daves3&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text=""/>
				<outline text="fs.readFile (&quot;xxx&quot;, function (err, data) {">
					<outline text="s3.newObject (&quot;/scripting.com/code/davemaillist/tmp.json&quot;, jsontext, &quot;application/json&quot;, &quot;public-read&quot;, function (err, data) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;saveArt: s3path == &quot; + s3path + &quot;, err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="console.log (&quot;saveArt: s3path == &quot; + s3path);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="})"/>
					</outline>
				</outline>
			<outline text="snapshots/beforecaptcha/index.html" created="Thu, 21 Aug 2025 16:00:12 GMT">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;Scripting News email&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="&lt;%basicIncludes2%&gt;"/>
						<outline text="&lt;script src=&quot;//s3.amazonaws.com/fargo.io/code/storage/api.js&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text="&lt;script src=&quot;code.js&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text="&lt;link href=&quot;styles.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;!-- Facebook metadata --&gt;">
							<outline text="&lt;meta property=&quot;og:url&quot; content=&quot;http://scripting.com/email/&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:type&quot; content=&quot;website&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:title&quot; content=&quot;Scripting News email&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:description&quot; content=&quot;Every night at midnight an email goes to subscribers with the posts from scripting.com from the previous day. One email per day.&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:image&quot; content=&quot;http://scripting.com/images/2019/08/21/kingKong.png&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:site_name&quot; content=&quot;Scripting News&quot; /&gt;"/>
							</outline>
						<outline text="&lt;!-- Twitter metadata --&gt;">
							<outline text="&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:site&quot; content=&quot;@davewiner&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:title&quot; content=&quot;Scripting News email&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:description&quot; content=&quot;Every night at midnight an email goes to subscribers with the posts from scripting.com from the previous day. One email per day.&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:image:src&quot; content=&quot;http://scripting.com/images/2019/08/21/kingKong.png&quot;&gt;"/>
							</outline>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;h3&gt;Scripting News email&lt;/h3&gt;"/>
							<outline text="&lt;p&gt;Enter your email address below and we'll send a confirming email.&lt;/p&gt;"/>
							<outline text="&lt;table&gt;">
								<outline text="&lt;tr&gt;">
									<outline text="&lt;td&gt;">
										<outline text="&lt;input class=&quot;xlarge emailInput&quot; id=&quot;idEmailAddress&quot; size=&quot;80&quot; type=&quot;text&quot; value=&quot;&quot; placeholder=&quot;&quot;&gt;"/>
										<outline text="&lt;/td&gt;"/>
										</outline>
									<outline text="&lt;td&gt;">
										<outline text="&lt;input class=&quot;btn btn-primary btnConfirm&quot; type=&quot;button&quot; value=&quot;Confirm&quot; onclick=&quot;confirmButtonClick ();&quot;&gt;" created="Tue, 06 May 2014 16:58:36 GMT" pgfnum="41161"/>
										<outline text="&lt;/td&gt;"/>
										</outline>
									<outline text="&lt;/tr&gt;"/>
									</outline>
								<outline text="&lt;/table&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			<outline text="snapshots/beforecaptcha/code.js">
				<outline text="const myProductName = &quot;davemaillist&quot;, myVersion = &quot;0.4.7&quot;; "/>
				<outline text=""/>
				<outline text="const AWS = require (&quot;aws-sdk&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const mail = require (&quot;davemail&quot;);"/>
				<outline text="const davehttp = require (&quot;davehttp&quot;); "/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text=""/>
				<outline text="exports.sendConfirmingEmail = sendConfirmingEmail;"/>
				<outline text="exports.confirmEmailCode = confirmEmailCode;"/>
				<outline text="exports.emailUnsub = emailUnsub;" isComment="true"/>
				<outline text="exports.start = start;"/>
				<outline text=""/>
				<outline text="var config = {">
					<outline text="fnameStats: &quot;data/stats.json&quot;,"/>
					<outline text="dataFolder: &quot;data/&quot;, "/>
					<outline text="fnameEmailTemplate: &quot;emailtemplate.html&quot;, "/>
					<outline text="ctSecsConfirmationTimeout: 30 * 60,"/>
					<outline text="ctSecsConfirmationTimeout: 5 * 60," isComment="true"/>
					<outline text="fnameEmailPrefs: &quot;data/emailPrefs.json&quot;, "/>
					<outline text="pathPrefsArchive: &quot;data/archive/&quot;,"/>
					<outline text="blogTitle: &quot;Scripting News&quot;, "/>
					<outline text="confirmSubscribeSubject: &quot;Please confirm your email address&quot;,"/>
					<outline text="confirmUnsubSubject: &quot;Confirm to unsubscribe&quot;,"/>
					<outline text="confirmOperationSubscribe: &quot; your subscription&quot;,"/>
					<outline text="confirmOperationUnsub: &quot;&quot;,"/>
					<outline text="httpPort: 1401,"/>
					<outline text="flLogToConsole: true, "/>
					<outline text="flAllowAccessFromAnywhere: true, "/>
					<outline text="flPostEnabled: false"/>
					<outline text="};"/>
					</outline>
				<outline text="const fnameConfig = &quot;config.json&quot;;"/>
				<outline text=""/>
				<outline text="var stats = {">
					<outline text="productName: myProductName,"/>
					<outline text="version: myVersion,"/>
					<outline text="ctSubscriptions: 0,"/>
					<outline text="whenLastSubscribe: new Date (0),"/>
					<outline text="ctStartups: 0,"/>
					<outline text="whenLastStartup: new Date (0),"/>
					<outline text="ctHits: 0,"/>
					<outline text="whenLastHit: new Date (0),"/>
					<outline text="ctHitsThisRun: 0,"/>
					<outline text="pendingConfirmations: new Array () "/>
					<outline text="};"/>
					</outline>
				<outline text="var flStatsChanged = false;"/>
				<outline text=""/>
				<outline text="function statsChanged () {">
					<outline text="flStatsChanged = true;"/>
					<outline text="}"/>
					</outline>
				<outline text="function addOrRemoveSubscription (obj) {">
					<outline text="Changes" isComment="true">
						<outline text="11/18/19; 4:50:42 PM by DW">
							<outline text="Save a daily archive."/>
							</outline>
						<outline text="8/30/19; 3:11:43 PM by DW">
							<outline text="Maintain stats.ctSubscriptions, stats.whenLastSubscribe."/>
							</outline>
						<outline text="8/30/19; 11:11:13 AM by DW">
							<outline text="email addresses are case insensitive. Dave.winer@gmail.com is the same as dave.winer@gmail.com."/>
							<outline text="if the address uses any uppercase letter, store a property called emailActual which is what you should send the email to."/>
							</outline>
						<outline text="8/27/19; 9:59:47 AM by DW">
							<outline text="Remove the flAdd param, the operation, whether you'r subbing or unsubbing is now included in the obj. "/>
							</outline>
						<outline text="8/26/19; 11:49:25 AM by DW">
							<outline text="The structure of the list changes.">
								<outline text="The key is the email address. "/>
								<outline text="Properties are enabled and when. "/>
								</outline>
							</outline>
						</outline>
					<outline text="obj == {" isComment="true">
						<outline text="&quot;magicString&quot;: &quot;hjzb52e1ar&quot;,"/>
						<outline text="&quot;urlWebApp&quot;: &quot;http://maillist.scripting.com/&quot;,"/>
						<outline text="&quot;email&quot;: &quot;dave@scripting.com&quot;,"/>
						<outline text="&quot;flSub&quot;: true,"/>
						<outline text="&quot;when&quot;: &quot;2019-08-27T13:55:17.481Z&quot;,"/>
						<outline text="&quot;whenConfirmed&quot;: &quot;2019-08-27T13:55:54.149Z&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="var f = config.fnameEmailPrefs, now = new Date ();"/>
					<outline text="function countSubs (theList) {">
						<outline text="var ct = 0;"/>
						<outline text="for (var x in theList) {">
							<outline text="if (theList [x].enabled) {">
								<outline text="ct++;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (ct);"/>
						<outline text="}"/>
						</outline>
					<outline text="utils.sureFilePath (f, function () {">
						<outline text="fs.readFile (f, function (err, data) {">
							<outline text="var theList = new Object ();"/>
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="theList = JSON.parse (data);"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="var key = obj.email.toLowerCase ();"/>
							<outline text="theList [key] = {">
								<outline text="when: now.toLocaleString (),"/>
								<outline text="enabled: obj.flSub"/>
								<outline text="};"/>
								</outline>
							<outline text="if (obj.email != key) { //it has some uppercase chars">
								<outline text="theList [key].emailActual = obj.email;"/>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="stats.ctSubscriptions = countSubs (theList); //8/30/19 by DW"/>
							<outline text="stats.whenLastSubscribe = now;"/>
							<outline text="statsChanged ();"/>
							<outline text="console.log (&quot;addOrRemoveSubscription: stats.ctSubscriptions == &quot; + stats.ctSubscriptions + &quot;, stats.whenLastSubscribe == &quot; + stats.whenLastSubscribe);" isComment="true"/>
							<outline text=""/>
							<outline text="theList [obj.screenName] = {" isComment="true">
								<outline text="email: obj.email,"/>
								<outline text="enabled: flAdd"/>
								<outline text="};"/>
								</outline>
							<outline text="fs.writeFile (f, utils.jsonStringify (theList), function (err) {">
								<outline text="});"/>
								</outline>
							<outline text=""/>
							<outline text="var farchive = config.pathPrefsArchive + utils.getDatePath (now, false) + &quot;.json&quot;; //11/18/19 by DW"/>
							<outline text="utils.sureFilePath (farchive, function () {">
								<outline text="fs.writeFile (farchive, utils.jsonStringify (theList), function (err) {">
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="//old version -- maintains a mailPrefs.json file in each users' folder" isComment="true">
						<outline text="var f = config.dataFolder + obj.screenName + &quot;/&quot; + config.emailPrefsFname;"/>
						<outline text="var now = new Date ();"/>
						<outline text="utils.sureFilePath (f, function () {">
							<outline text="fs.readFile (f, function (err, data) {">
								<outline text="var prefs = {">
									<outline text="ctUpdates: 0,"/>
									<outline text="whenCreated: now"/>
									<outline text="};"/>
									</outline>
								<outline text="if (!err) {">
									<outline text="var jstruct = JSON.parse (data);"/>
									<outline text="for (x in jstruct) {">
										<outline text="prefs [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="prefs.enabled = true;"/>
								<outline text="prefs.email = obj.email;"/>
								<outline text="prefs.urlWebApp = obj.urlWebApp;"/>
								<outline text="prefs.whenUpdated = now;"/>
								<outline text="prefs.ctUpdates++;"/>
								<outline text="fs.writeFile (f, utils.jsonStringify (prefs), function (err) {">
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function timeoutEmailConfirmations () { //delete pending confirmations that are too old">
					<outline text="for (var i = stats.pendingConfirmations.length - 1; i &gt;= 0; i--) {">
						<outline text="var obj = stats.pendingConfirmations [i];"/>
						<outline text="if (utils.secondsSince (obj.when) &gt; config.ctSecsConfirmationTimeout) {">
							<outline text="console.log (&quot;timeoutEmailConfirmations: obj == &quot; + utils.jsonStringify (obj));"/>
							<outline text="stats.pendingConfirmations.splice (i, 1);"/>
							<outline text="statsChanged ();"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getRandomPassword (ctchars) { //NPM is refusing the recognize package updates, so I'm replicating code ugh" created="Wed, 23 Jan 2013 15:14:04 GMT" pgfnum="17535">
					<outline text="var s= &quot;&quot;, ch;"/>
					<outline text="while (s.length &lt; ctchars)  {">
						<outline text="ch = String.fromCharCode (utils.random (33, 122));"/>
						<outline text="if (utils.isAlpha (ch) || utils.isNumeric (ch)) {" created="Wed, 11 Jan 2006 12:42:53 GMT">
							<outline text="s += ch;"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (s.toLowerCase ());"/>
					<outline text="}"/>
					</outline>
				<outline text="function sendConfirmingEmail (email, urlWebApp, flSub, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="8/27/19; 9:14:53 AM by DW">
							<outline text="Allow this routine to be used to send confirmations for subs or unsubs.">
								<outline text="new param, flSub, if true we subscribe, otherwise unsub."/>
								</outline>
							</outline>
						<outline text="8/26/19; 11:45:09 AM by DW">
							<outline text="Remove the screenName parameter, no longer requiring identity to use mail list."/>
							</outline>
						</outline>
					<outline text="console.log (&quot;sendConfirmingEmail: email == &quot; + email + &quot;, flSub == &quot; + flSub + &quot;, urlWebApp == &quot; + urlWebApp);"/>
					<outline text="var magicString = getRandomPassword (10);"/>
					<outline text="if (utils.endsWith (urlWebApp, &quot;#&quot;)) { //delete # at end of url if present">
						<outline text="urlWebApp = utils.stringDelete (urlWebApp, urlWebApp.length, 1); "/>
						<outline text="}"/>
						</outline>
					<outline text="var obj = {">
						<outline text="magicString: magicString,"/>
						<outline text="urlWebApp: urlWebApp,"/>
						<outline text="email: email,"/>
						<outline text="flSub: flSub,"/>
						<outline text="when: new Date ()"/>
						<outline text="};"/>
						</outline>
					<outline text="stats.pendingConfirmations.push (obj);"/>
					<outline text="statsChanged ();"/>
					<outline text="console.log (&quot;sendConfirmingEmail: obj == &quot; + utils.jsonStringify (obj));"/>
					<outline text="var params = {">
						<outline text="title: (flSub) ? config.confirmSubscribeSubject : config.confirmUnsubSubject,"/>
						<outline text="blogTitle: config.blogTitle,"/>
						<outline text="operationToConfirm: (flSub) ? config.confirmOperationSubscribe : config.confirmOperationUnsub,"/>
						<outline text="confirmationUrl: urlWebApp + &quot;?emailConfirmCode=&quot; + encodeURIComponent (magicString)"/>
						<outline text="};"/>
						</outline>
					<outline text="fs.readFile (config.fnameEmailTemplate, function (err, emailTemplate) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;sendConfirmingEmail: err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var mailtext = utils.multipleReplaceAll (emailTemplate.toString (), params, false, &quot;[%&quot;, &quot;%]&quot;);"/>
							<outline text="mail.send (email, params.title, mailtext, &quot;dave@scripting.com&quot;, function (err, data) {">
								<outline text="if (err) {">
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="callback (undefined, obj);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="fs.writeFile (&quot;data/lastmail.html&quot;, mailtext, function (err) {">
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function confirmEmailCode (theCode, callback) {">
					<outline text="var flfound = false;"/>
					<outline text="console.log (&quot;confirmEmailCode: theCode == &quot; + theCode);"/>
					<outline text="stats.pendingConfirmations.forEach (function (obj) {">
						<outline text="if (obj.magicString == theCode) {">
							<outline text="obj.whenConfirmed = new Date ();"/>
							<outline text="addOrRemoveSubscription (obj);"/>
							<outline text="console.log (&quot;confirmEmailCode: obj == &quot; + utils.jsonStringify (obj));"/>
							<outline text="callback (undefined, obj);"/>
							<outline text="flfound = true;"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="if (!flfound) {">
						<outline text="callback ({message: &quot;The code is not valid or has expired.&quot;});"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function emailUnsub (email, callback) {" isComment="true">
					<outline text="Changes" isComment="true">
						<outline text="8/26/19; 11:56:28 AM by DW">
							<outline text="Todo -- just send a confirming email to the address, and prepare to receive a code."/>
							</outline>
						</outline>
					<outline text="davetwitter.getScreenName (token, secret, function (screenName) {" isComment="true">
						<outline text="if (screenName === undefined) {">
							<outline text="callback ({message: &quot;Can't unsub because the accessToken is not valid.&quot;});    "/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var obj = {">
								<outline text="screenName: screenName, "/>
								<outline text="email: &quot;&quot;"/>
								<outline text="};"/>
								</outline>
							<outline text="addOrRemoveSubscription (obj, false);"/>
							<outline text="callback (undefined, obj);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function handleHttpRequest (theRequest) {">
					<outline text="var params = theRequest.params;"/>
					<outline text=""/>
					<outline text="stats.ctHits++;"/>
					<outline text="stats.ctHitsThisRun++;"/>
					<outline text="stats.whenLastHit = new Date ();"/>
					<outline text="statsChanged ();"/>
					<outline text=""/>
					<outline text="function returnPlainText (s) {" isComment="true">
						<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, s.toString ());"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnData (jstruct) {">
						<outline text="console.log (&quot;returnData: jstruct == &quot; + utils.jsonStringify (jstruct));" isComment="true"/>
						<outline text="if (jstruct === undefined) {">
							<outline text="jstruct = {};"/>
							<outline text="}"/>
							</outline>
						<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnHtml (htmltext) {" isComment="true">
						<outline text="theRequest.httpReturn (200, &quot;text/html&quot;, htmltext);"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnXml (xmltext) {" isComment="true">
						<outline text="theRequest.httpReturn (200, &quot;text/xml&quot;, xmltext);"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnNotFound () {">
						<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, &quot;Not found.&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnError (jstruct) {">
						<outline text="console.log (&quot;returnError: jstruct == &quot; + utils.jsonStringify (jstruct));"/>
						<outline text="theRequest.httpReturn (500, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
						<outline text="}"/>
						</outline>
					<outline text="function httpReturn (err, jstruct) {">
						<outline text="if (err) {">
							<outline text="returnError (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="returnData (jstruct);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function httpReturnHtml (err, htmltext) {" isComment="true">
						<outline text="if (err) {">
							<outline text="returnError (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="theRequest.httpReturn (200, &quot;text/html&quot;, htmltext);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function returnRedirect (url, code) {" isComment="true">
						<outline text="if (code === undefined) {">
							<outline text="code = 302;"/>
							<outline text="}"/>
							</outline>
						<outline text="theRequest.httpReturn (code, &quot;text/plain&quot;, code + &quot; REDIRECT&quot;);"/>
						<outline text="}"/>
						<outline text=""/>
						</outline>
					<outline text="function returnFeedInfo (feedUrl) {" isComment="true">
						<outline text="getFeedInfoFromDatabase (feedUrl, function (err, result) {">
							<outline text="console.log (&quot;returnFeedInfo: result == &quot; + utils.jsonStringify (result));"/>
							<outline text="httpReturn (err, result);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getSqlResult (sqltext, callback) {" isComment="true">
						<outline text="theSqlConnectionPool.getConnection (function (err, connection) {">
							<outline text="if (err) {">
								<outline text="httpReturn (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="connection.query (sqltext, function (err, result) {">
									<outline text="connection.release ();"/>
									<outline text="httpReturn (err, result);"/>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function returnServerHomePage () { //return true if we handled it" isComment="true">
						<outline text="if (config.urlServerHomePageSource === undefined) {">
							<outline text="return (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="if (utils.secondsSince (whenLastHomepageRead) &gt; config.ctSecsHomepageCache) {">
							<outline text="request (config.urlServerHomePageSource, function (error, response, htmltext) {">
								<outline text="if (!error &amp;&amp; response.statusCode == 200) {">
									<outline text="console.log (&quot;returnServerHomePage: read cached home page text, &quot; + htmltext.length + &quot; chars.&quot;);" isComment="true"/>
									<outline text="homepageCache = htmltext;"/>
									<outline text="whenLastHomepageRead = new Date ();"/>
									<outline text="returnHtml (htmltext);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="returnNotFound ();"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="returnHtml (homepageCache);"/>
							<outline text="}"/>
							</outline>
						<outline text="return (true);"/>
						<outline text="}"/>
						</outline>
					<outline text="function updateUserOpml (screenname) { //code was repeating, factored here" isComment="true">
						<outline text="uploadUserOpmlToS3 (screenname, function (err, result) {">
							<outline text="httpReturn (err, result);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function callWithScreenname (callback) {" isComment="true">
						<outline text="davetwitter.getScreenName (token, secret, function (screenname) {" created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784">
							<outline text="if (screenname === undefined) {" created="Thu, 10 Jul 2014 00:53:00 GMT" pgfnum="42793">
								<outline text="returnError ({message: &quot;Can't do the thing you want because the accessToken is not valid.&quot;});    "/>
								<outline text="}" created="Thu, 10 Jul 2014 00:53:11 GMT" pgfnum="42797"/>
								</outline>
							<outline text="else {" created="Thu, 10 Jul 2014 00:53:12 GMT" pgfnum="42798">
								<outline text="callback (screenname);"/>
								<outline text="}" created="Thu, 10 Jul 2014 00:53:14 GMT" pgfnum="42799"/>
								</outline>
							<outline text="});" created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function returnStats () {">
						<outline text="var briefStats = new Object ();"/>
						<outline text="utils.copyScalars (stats, briefStats);"/>
						<outline text="returnData (briefStats);"/>
						<outline text="}"/>
						</outline>
					<outline text="switch (theRequest.method) {">
						<outline text="case &quot;GET&quot;:">
							<outline text="switch (theRequest.lowerpath) {">
								<outline text="case &quot;/&quot;:">
									<outline text="confirmEmailCode (params.emailConfirmCode, httpReturn);"/>
									<outline text="return (true);"/>
									</outline>
								<outline text="case &quot;/confirmemail&quot;: " created="Tue, 22 Jul 2014 18:44:25 GMT" pgfnum="43030">
									<outline text="sendConfirmingEmail (params.email, params.urlwebapp, utils.getBoolean (params.subscribe), httpReturn);"/>
									<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
									</outline>
								<outline text="case &quot;/confirmemailcode&quot;: ">
									<outline text="confirmEmailCode (params.code, httpReturn);"/>
									<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
									</outline>
								<outline text="case &quot;/emailunsub&quot;: " isComment="true">
									<outline text="emailUnsub (params.email, httpReturn);"/>
									<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
									</outline>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (false); //we didn't handle it"/>
					<outline text="}"/>
					</outline>
				<outline text="function readConfig (callback) {">
					<outline text="utils.sureFilePath (fnameConfig, function () {">
						<outline text="fs.readFile (fnameConfig, function (err, data) {">
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (data.toString ());"/>
									<outline text="console.log (utils.jsonStringify (jstruct)); " isComment="true"/>
									<outline text="for (var x in jstruct) {">
										<outline text="config [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;readConfig: err == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readStats (callback) {">
					<outline text="utils.sureFilePath (config.fnameStats, function () {">
						<outline text="fs.readFile (config.fnameStats, function (err, data) {">
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (data.toString ());"/>
									<outline text="console.log (utils.jsonStringify (jstruct)); " isComment="true"/>
									<outline text="for (var x in jstruct) {">
										<outline text="stats [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;readStats: err == &quot; + err.message);" isComment="true"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function writeStats (callback) {">
					<outline text="utils.sureFilePath (config.fnameStats, function () {">
						<outline text="fs.writeFile (config.fnameStats, utils.jsonStringify (stats), function (err) {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function everyMinute () {">
					<outline text="}"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="timeoutEmailConfirmations ();"/>
					<outline text="if (flStatsChanged) {">
						<outline text="flStatsChanged = false;"/>
						<outline text="writeStats ();"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function start (configParam, callback) {">
					<outline text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot;\n&quot;);"/>
					<outline text="readConfig (function () {">
						<outline text="if (configParam !== undefined) {">
							<outline text="for (x in configParam) {">
								<outline text="config [x] = configParam [x];"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="console.log (myProductName + &quot;.start: config == &quot; + utils.jsonStringify (config));"/>
						<outline text="readStats (function () {">
							<outline text="stats.productName = myProductName;"/>
							<outline text="stats.version = myVersion;"/>
							<outline text="stats.whenLastStartup = new Date ();"/>
							<outline text="stats.ctStartups++;"/>
							<outline text="stats.ctHitsThisRun = 0;"/>
							<outline text="statsChanged ();"/>
							<outline text=""/>
							<outline text="var httpConfig = {">
								<outline text="port: config.httpPort,"/>
								<outline text="flLogToConsole: config.flLogToConsole,"/>
								<outline text="flAllowAccessFromAnywhere: config.flAllowAccessFromAnywhere,"/>
								<outline text="flPostEnabled: config.flPostEnabled"/>
								<outline text="};"/>
								</outline>
							<outline text="davehttp.start (httpConfig, handleHttpRequest);"/>
							<outline text="setInterval (everySecond, 1000); "/>
							<outline text="utils.runEveryMinute (everyMinute);"/>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			</outline>
		<outline text="allservers:maine:pagepark:domains:subscribe.scripting.com:">
			<outline text="code.js">
				<outline text="const urlMailListServer = &quot;https://maillist2.scripting.com/&quot;;"/>
				<outline text=""/>
				<outline text="const appConsts = {" isComment="true">
					<outline text="productname: &quot;scriptingNewsPrefs&quot;,"/>
					<outline text="productnameForDisplay: &quot;Scripting Prefs&quot;,"/>
					<outline text="urlTwitterServer: &quot;http://likes.scripting.com/&quot;,"/>
					<outline text="pathAppPrefs: &quot;scriptingNewsPrefs.json&quot;,"/>
					<outline text="domain: &quot;scripting.com&quot;,"/>
					<outline text="version: &quot;0.4.0&quot;"/>
					<outline text="};"/>
					</outline>
				<outline text="var appPrefs = {" isComment="true" created="Fri, 04 Jan 2013 13:52:28 GMT" pgfnum="16628">
					<outline text="ctStartups: 0, "/>
					<outline text="whenLastStartup: new Date (0),"/>
					<outline text="ctPrefsSaves: 0,"/>
					<outline text="whenLastPrefsSave: new Date (0),"/>
					<outline text="myMailAddress: &quot;&quot;"/>
					<outline text="};" created="Fri, 04 Jan 2013 22:10:46 GMT" pgfnum="16700"/>
					</outline>
				<outline text="var myNodeStorageApp;" isComment="true"/>
				<outline text="var myUserInfo;" isComment="true"/>
				<outline text="var fnamePrefs = &quot;prefs.json&quot;;" isComment="true"/>
				<outline text="var flPrefsChanged = false;" isComment="true"/>
				<outline text=""/>
				<outline text=""/>
				<outline text="function sendConfirmingEmail (email, flSubscribe, callback) {">
					<outline text="var paramtable = {" created="Sat, 09 Aug 2014 15:42:15 GMT" pgfnum="43199">
						<outline text="email: email," created="Sat, 09 Aug 2014 15:42:28 GMT" pgfnum="43203"/>
						<outline text="urlwebapp: stringNthField (window.location.href, &quot;?&quot;, 1),"/>
						<outline text="subscribe: flSubscribe,"/>
						<outline text="captcharesponse: grecaptcha.getResponse () //8/21/25 by DW" created="Thu, 21 Aug 2025 15:27:57 GMT"/>
						<outline text="}" created="Sat, 09 Aug 2014 15:42:23 GMT" pgfnum="43202"/>
						</outline>
					<outline text="console.log (&quot;sendConfirmingEmail: paramtable == &quot; + jsonStringify (paramtable));" created="Thu, 21 Aug 2025 15:34:44 GMT"/>
					<outline text="var url = urlMailListServer + &quot;confirmemail?&quot; + twBuildParamList (paramtable, false);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
					<outline text="$.ajax ({">
						<outline text="type: &quot;GET&quot;,"/>
						<outline text="url: url,"/>
						<outline text="success: function (data) {">
							<outline text="callback (undefined, data);"/>
							<outline text="},"/>
							</outline>
						<outline text="error: function (status, something, otherthing) { ">
							<outline text="var err = JSON.parse (status.responseText);"/>
							<outline text="console.log (&quot;sendConfirmingEmail: err == &quot; + jsonStringify (err));" created="Wed, 12 Jun 2013 13:14:10 GMT" pgfnum="25848"/>
							<outline text="callback (err);"/>
							<outline text="},"/>
							</outline>
						<outline text="dataType: &quot;json&quot;"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function twConfirmEmail (email, callback) { //8/16/19 by DW" isComment="true">
					<outline text="var paramtable = {" created="Sat, 09 Aug 2014 15:42:15 GMT" pgfnum="43199">
						<outline text="oauth_token: localStorage.twOauthToken," created="Sat, 09 Aug 2014 15:42:28 GMT" pgfnum="43203"/>
						<outline text="oauth_token_secret: localStorage.twOauthTokenSecret," created="Sat, 09 Aug 2014 15:42:43 GMT" pgfnum="43205"/>
						<outline text="email: email," created="Sat, 09 Aug 2014 15:43:02 GMT" pgfnum="43206"/>
						<outline text="urlwebapp: stringNthField (window.location.href, &quot;?&quot;, 1)"/>
						<outline text="}" created="Sat, 09 Aug 2014 15:42:23 GMT" pgfnum="43202"/>
						</outline>
					<outline text="var url = twGetDefaultServer () + &quot;confirmemail?&quot; + twBuildParamList (paramtable);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
					<outline text="$.ajax ({">
						<outline text="type: &quot;GET&quot;,"/>
						<outline text="url: url,"/>
						<outline text="success: function (data) {">
							<outline text="callback (undefined, data);"/>
							<outline text="},"/>
							</outline>
						<outline text="error: function (status, something, otherthing) { ">
							<outline text="var err = JSON.parse (status.responseText);"/>
							<outline text="console.log (&quot;twConfirmEmail: err == &quot; + JSON.stringify (err, undefined, 4));" created="Wed, 12 Jun 2013 13:14:10 GMT" pgfnum="25848"/>
							<outline text="callback (err);"/>
							<outline text="},"/>
							</outline>
						<outline text="dataType: &quot;json&quot;"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function confirmEmailCode (theCode, callback) {">
					<outline text="var paramtable = {" created="Sat, 09 Aug 2014 15:42:15 GMT" pgfnum="43199">
						<outline text="code: theCode" created="Sat, 09 Aug 2014 15:43:02 GMT" pgfnum="43206"/>
						<outline text="}" created="Sat, 09 Aug 2014 15:42:23 GMT" pgfnum="43202"/>
						</outline>
					<outline text="var url = urlMailListServer + &quot;confirmemailcode?&quot; + twBuildParamList (paramtable);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
					<outline text="$.ajax ({">
						<outline text="type: &quot;GET&quot;,"/>
						<outline text="url: url,"/>
						<outline text="success: function (data) {">
							<outline text="callback (undefined, data);"/>
							<outline text="},"/>
							</outline>
						<outline text="error: function (status, something, otherthing) { ">
							<outline text="var err = JSON.parse (status.responseText);"/>
							<outline text="console.log (&quot;confirmEmailCode: err == &quot; + jsonStringify (err));" created="Wed, 12 Jun 2013 13:14:10 GMT" pgfnum="25848"/>
							<outline text="callback (err);"/>
							<outline text="},"/>
							</outline>
						<outline text="dataType: &quot;json&quot;"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function twConfirmCode (theCode, callback) { //8/16/19 by DW" isComment="true">
					<outline text="var paramtable = {" created="Sat, 09 Aug 2014 15:42:15 GMT" pgfnum="43199">
						<outline text="oauth_token: localStorage.twOauthToken," created="Sat, 09 Aug 2014 15:42:28 GMT" pgfnum="43203"/>
						<outline text="oauth_token_secret: localStorage.twOauthTokenSecret," created="Sat, 09 Aug 2014 15:42:43 GMT" pgfnum="43205"/>
						<outline text="code: theCode" created="Sat, 09 Aug 2014 15:43:02 GMT" pgfnum="43206"/>
						<outline text="}" created="Sat, 09 Aug 2014 15:42:23 GMT" pgfnum="43202"/>
						</outline>
					<outline text="var url = twGetDefaultServer () + &quot;confirmemailcode?&quot; + twBuildParamList (paramtable);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
					<outline text="$.ajax ({">
						<outline text="type: &quot;GET&quot;,"/>
						<outline text="url: url,"/>
						<outline text="success: function (data) {">
							<outline text="callback (undefined, data);"/>
							<outline text="},"/>
							</outline>
						<outline text="error: function (status, something, otherthing) { ">
							<outline text="var err = JSON.parse (status.responseText);"/>
							<outline text="console.log (&quot;twConfirmCode: err == &quot; + JSON.stringify (err, undefined, 4));" created="Wed, 12 Jun 2013 13:14:10 GMT" pgfnum="25848"/>
							<outline text="callback (err);"/>
							<outline text="},"/>
							</outline>
						<outline text="dataType: &quot;json&quot;"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				<outline text="function twUnsub (callback) { //8/20/19 by DW" isComment="true">
					<outline text="var paramtable = {" created="Sat, 09 Aug 2014 15:42:15 GMT" pgfnum="43199">
						<outline text="oauth_token: localStorage.twOauthToken," created="Sat, 09 Aug 2014 15:42:28 GMT" pgfnum="43203"/>
						<outline text="oauth_token_secret: localStorage.twOauthTokenSecret" created="Sat, 09 Aug 2014 15:42:43 GMT" pgfnum="43205"/>
						<outline text="}" created="Sat, 09 Aug 2014 15:42:23 GMT" pgfnum="43202"/>
						</outline>
					<outline text="var url = twGetDefaultServer () + &quot;emailunsub?&quot; + twBuildParamList (paramtable);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
					<outline text="$.ajax ({">
						<outline text="type: &quot;GET&quot;,"/>
						<outline text="url: url,"/>
						<outline text="success: function (data) {">
							<outline text="callback (undefined, data);"/>
							<outline text="},"/>
							</outline>
						<outline text="error: function (status, something, otherthing) { ">
							<outline text="var err = JSON.parse (status.responseText);"/>
							<outline text="console.log (&quot;twConfirmCode: err == &quot; + JSON.stringify (err, undefined, 4));" created="Wed, 12 Jun 2013 13:14:10 GMT" pgfnum="25848"/>
							<outline text="callback (err);"/>
							<outline text="},"/>
							</outline>
						<outline text="dataType: &quot;json&quot;"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function confirmButtonClick () {">
					<outline text="var emailAddress = $(&quot;#idEmailAddress&quot;).val ();"/>
					<outline text="console.log (&quot;confirmButtonClick: emailAddress == &quot; + emailAddress);"/>
					<outline text="appPrefs.myMailAddress = emailAddress;" isComment="true"/>
					<outline text="prefsChanged ();" isComment="true"/>
					<outline text="sendConfirmingEmail (emailAddress, true, function (err, data) {">
						<outline text="var theAlert;"/>
						<outline text="if (err) {">
							<outline text="theAlert = &quot;Couldn't send the confirmation because there was an error: &quot; + err.message;"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="theAlert = &quot;A confirmation email has been sent.&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="alertDialog (theAlert);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getURLParameter (name) {">
					<outline text="return (decodeURI ((RegExp(name + '=' + '(.+?)(&amp;|$)').exec(location.search)||[,null])[1]));"/>
					<outline text="}" created="Thu, 24 Apr 2014 00:54:02 GMT" pgfnum="40519"/>
					</outline>
				<outline text="function checkEmailConfirmParams () {">
					<outline text="var theCode = getURLParameter (&quot;emailConfirmCode&quot;);"/>
					<outline text="if (theCode != &quot;null&quot;) {">
						<outline text="console.log (&quot;checkEmailConfirmParams: theCode == &quot; + theCode);"/>
						<outline text="confirmEmailCode (theCode, function (err, data) {">
							<outline text="var theAlert;"/>
							<outline text="if (err) {">
								<outline text="theAlert = &quot;Couldn't confirm the subscription because there was an error: &quot; + err.message;"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (data.flSub) {">
									<outline text="theAlert = &quot;Thanks for subscribing!&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="theAlert = &quot;Unsubscribed.&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="alert (&quot;checkEmailConfirmParams: data == &quot; + jsonStringify (data));" isComment="true"/>
								<outline text="theAlert = &quot;Subscription confirmed. We will send email updates to &quot; + data.email + &quot;. There will be a link at the end of each email that unsubscribes.&quot;;" isComment="true"/>
								<outline text="}"/>
								</outline>
							<outline text="alertDialog (theAlert, function () {">
								<outline text="window.location.href = &quot;http://scripting.com/&quot;; //redirect"/>
								<outline text="window.location.href = stringNthField (window.location.href, &quot;?&quot;, 1); //redirect" isComment="true"/>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function checkEmailUnsub () { ">
					<outline text="var unsub = getURLParameter (&quot;unsub&quot;);"/>
					<outline text="if (unsub == &quot;true&quot;) {">
						<outline text="var emailAddress = getURLParameter (&quot;email&quot;);"/>
						<outline text="if (emailAddress != &quot;null&quot;) {">
							<outline text="sendConfirmingEmail (emailAddress, false, function (err, data) {">
								<outline text="var theAlert;"/>
								<outline text="if (err) {">
									<outline text="theAlert = &quot;Couldn't send the confirmation because there was an error: &quot; + err.message;"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="theAlert = &quot;A confirmation email has been sent.&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="alertDialog (theAlert);"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="confirmDialog (&quot;Click OK to unsubscribe from the Scripting News overnight email.&quot;, function () {" isComment="true">
							<outline text="twUnsub (function (err, data) {">
								<outline text="if (err) {">
									<outline text="alertDialog (err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="alertDialog (&quot;You are now unsubscribed. Have a nice day! :-)&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getPrefsFromServer (callback) {">
					<outline text="twGetFile (fnamePrefs, true, true, function (err, data) {">
						<outline text="if (!err) {">
							<outline text="var jstruct = JSON.parse (data.filedata);"/>
							<outline text="for (var x in jstruct) {">
								<outline text="appPrefs [x] = jstruct [x];"/>
								<outline text="}"/>
								</outline>
							<outline text="console.log (&quot;getPrefsFromServer: appPrefs == &quot; + jsonStringify (appPrefs));"/>
							<outline text="}"/>
							</outline>
						<outline text="if (callback !== undefined) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function savePrefsOnServer (callback) {">
					<outline text="appPrefs.ctPrefsSaves++;"/>
					<outline text="appPrefs.whenLastPrefsSave = new Date ();"/>
					<outline text="twUploadFile (fnamePrefs, jsonStringify (appPrefs), &quot;application/json&quot;, true, function (data) {">
						<outline text="if (callback !== undefined) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function connectToTwitter () {">
					<outline text="twConnectToTwitter ();" created="Thu, 13 Jun 2013 23:05:41 GMT" pgfnum="26122"/>
					<outline text="}"/>
					</outline>
				<outline text="function prefsChanged () {">
					<outline text="flPrefsChanged = true;"/>
					<outline text="}"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="if (flPrefsChanged) {">
						<outline text="flPrefsChanged = false;"/>
						<outline text="savePrefsOnServer ();"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function startup () {">
					<outline text="console.log (&quot;startup&quot;);"/>
					<outline text="checkEmailConfirmParams (); //redirects if they're there -- 8/17/19 by DW"/>
					<outline text="checkEmailUnsub (); //8/20/19 by DW"/>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					<outline text="twStorageData.urlTwitterServer = appConsts.urlTwitterServer;" isComment="true"/>
					<outline text="twGetOauthParams ();" isComment="true"/>
					<outline text="if (twIsTwitterConnected ()) {" isComment="true">
						<outline text="$(&quot;#idIfConnected&quot;).css (&quot;display&quot;, &quot;block&quot;);"/>
						<outline text="twGetUserInfo (twGetScreenName (), function (userInfo) {">
							<outline text="myUserInfo = userInfo;"/>
							<outline text="});"/>
							</outline>
						<outline text="twGetTwitterConfig (function () { //twStorageData.twitterConfig will have information from twitter.com">
							<outline text="});"/>
							</outline>
						<outline text="getPrefsFromServer (function () {">
							<outline text="appPrefs.ctStartups++;"/>
							<outline text="appPrefs.whenLastStartup = new Date ();"/>
							<outline text="savePrefsOnServer ();"/>
							<outline text="checkEmailConfirmParams (); //redirects if they're there -- 8/17/19 by DW"/>
							<outline text="checkEmailUnsub (); //8/20/19 by DW"/>
							<outline text="$(&quot;#idEmailAddress&quot;).val (appPrefs.myMailAddress);"/>
							<outline text="self.setInterval (everySecond, 1000); "/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="else {" isComment="true">
						<outline text="$(&quot;#idIfNotConnected&quot;).css (&quot;display&quot;, &quot;block&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="hitCounter (); " isComment="true"/>
					<outline text="initGoogleAnalytics (); " isComment="true"/>
					<outline text="myNodeStorageApp = new nodeStorageApp (appConsts, appPrefs);" isComment="true"/>
					<outline text="myNodeStorageApp.everySecond = function () {" isComment="true">
						<outline text="};"/>
						</outline>
					<outline text="myNodeStorageApp.start (function (flConnected) {" isComment="true">
						<outline text="if (flConnected) {">
							<outline text="appPrefs.ctStartups++;"/>
							<outline text="prefsChanged ();"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="showHideItemsThatRequireLogin ();" isComment="true"/>
							<outline text="initTwitterMenuItems ();" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text="initGoogleAnalytics (); "/>
						<outline text="hitCounter (); "/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="styles.css">
				<outline text="@import url('https://fonts.googleapis.com/css?family=Oswald:400,700');"/>
				<outline text=""/>
				<outline text="body {">
					<outline text="font-family: Ubuntu;"/>
					<outline text="font-size: 18px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPageBody {">
					<outline text="width: 50%;"/>
					<outline text="margin-top: 200px;"/>
					<outline text="margin-left: auto;"/>
					<outline text="margin-right: auto;"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text=".divHowLong, p {">
					<outline text="font-size: 18px;"/>
					<outline text="line-height: 140%;"/>
					<outline text="margin-bottom: 10px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".emailInput {">
					<outline text="margin-top: 10px !important;"/>
					<outline text="font-size: 18px !important;"/>
					<outline text="padding: 3px !important; "/>
					<outline text="height: 32px !important; "/>
					<outline text="width: 400px !important;"/>
					<outline text="}"/>
					</outline>
				<outline text=".btnConfirm {">
					<outline text="height: 28px;"/>
					<outline text="margin-left: 8px;"/>
					<outline text="}"/>
					</outline>
				<outline text="td {">
					<outline text="vertical-align: middle;"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="/* styles for phone */" created="Sun, 09 Mar 2014 19:11:13 GMT" pgfnum="38719">
					<outline text="@media only screen "/>
					<outline text="and (min-device-width : 320px) "/>
					<outline text="and (max-device-width : 480px) {">
						<outline text="body {">
							<outline text="font-size: 16px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divPageBody {">
							<outline text="width: 90%;"/>
							<outline text="margin-left: auto;"/>
							<outline text="margin-right: auto;"/>
							<outline text="margin-top: 90px;"/>
							<outline text="}"/>
							</outline>
						<outline text="table {">
							<outline text="width: 95%;"/>
							<outline text="}"/>
							</outline>
						<outline text=".emailInput {">
							<outline text="width: 100% !important;"/>
							<outline text="}"/>
							</outline>
						<outline text=".modal {">
							<outline text="width: 95% !important;"/>
							<outline text="left: 70% !important;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* styles for tablet */">
					<outline text="@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) {">
						<outline text=".divPageBody {">
							<outline text="width: 75%;"/>
							<outline text="margin-left: auto;"/>
							<outline text="margin-right: auto;"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				</outline>
			<outline text="index.html">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;Scripting News email&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="&lt;%basicIncludes2%&gt;"/>
						<outline text="&lt;script src=&quot;//s3.amazonaws.com/fargo.io/code/storage/api.js&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text="&lt;script src=&quot;code.js?x=0&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text="&lt;link href=&quot;styles.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;!-- Facebook metadata --&gt;">
							<outline text="&lt;meta property=&quot;og:url&quot; content=&quot;http://scripting.com/email/&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:type&quot; content=&quot;website&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:title&quot; content=&quot;Scripting News email&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:description&quot; content=&quot;Every night at midnight an email goes to subscribers with the posts from scripting.com from the previous day. One email per day.&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:image&quot; content=&quot;http://scripting.com/images/2019/08/21/kingKong.png&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:site_name&quot; content=&quot;Scripting News&quot; /&gt;"/>
							</outline>
						<outline text="&lt;!-- Twitter metadata --&gt;">
							<outline text="&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:site&quot; content=&quot;@davewiner&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:title&quot; content=&quot;Scripting News email&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:description&quot; content=&quot;Every night at midnight an email goes to subscribers with the posts from scripting.com from the previous day. One email per day.&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:image:src&quot; content=&quot;http://scripting.com/images/2019/08/21/kingKong.png&quot;&gt;"/>
							</outline>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;h3&gt;Scripting News email&lt;/h3&gt;"/>
							<outline text="&lt;p&gt;Enter your email address below and we'll send a confirming email.&lt;/p&gt;"/>
							<outline text="&lt;table&gt;">
								<outline text="&lt;tr&gt;" created="Thu, 21 Aug 2025 14:38:18 GMT">
									<outline text="&lt;td&gt;" created="Thu, 21 Aug 2025 14:38:22 GMT">
										<outline text="&lt;div class=&quot;g-recaptcha&quot; data-sitekey=&quot;6LeT2K0rAAAAAA-0PbMucjXdaqj4Vc7bpEq99Bjc&quot;&gt;&lt;/div&gt;"/>
										<outline text="&lt;/td&gt;" created="Thu, 21 Aug 2025 14:38:27 GMT"/>
										</outline>
									<outline text="&lt;/tr&gt;" created="Thu, 21 Aug 2025 14:38:20 GMT"/>
									</outline>
								<outline text="&lt;tr&gt;">
									<outline text="&lt;td&gt;">
										<outline text="&lt;input class=&quot;xlarge emailInput&quot; id=&quot;idEmailAddress&quot; size=&quot;80&quot; type=&quot;text&quot; value=&quot;&quot; placeholder=&quot;&quot;&gt;"/>
										<outline text="&lt;/td&gt;"/>
										</outline>
									<outline text="&lt;td&gt;">
										<outline text="&lt;input class=&quot;btn btn-primary btnConfirm&quot; type=&quot;button&quot; value=&quot;Confirm&quot; onclick=&quot;confirmButtonClick ();&quot;&gt;" created="Tue, 06 May 2014 16:58:36 GMT" pgfnum="41161"/>
										<outline text="&lt;/td&gt;"/>
										</outline>
									<outline text="&lt;/tr&gt;"/>
									</outline>
								<outline text="&lt;/table&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;script src=&quot;https://www.google.com/recaptcha/api.js&quot; async defer&gt;&lt;/script&gt;"/>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			</outline>
		<outline text="allservers:maine:pagepark:domains:maillist2.scripting.com:">
			<outline text="package.json" created="Sat, 26 Apr 2025 18:22:49 GMT">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;scriptingMailList&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Manages the nightly mail function on Scripting News.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;main&quot;: &quot;maillist.js&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;dependencies&quot;: {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daves3&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davemaillist&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="maillist.js" created="Sat, 26 Apr 2025 18:16:49 GMT">
				<outline text="const myProductName = &quot;scriptingMailList&quot;, myVersion = &quot;0.4.1&quot;;"/>
				<outline text=""/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const maillist = require (&quot;./lib/davemaillist.js&quot;);"/>
				<outline text="const s3 = require (&quot;daves3&quot;);"/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text=""/>
				<outline text="const myConfig = {">
					<outline text="httpPort: process.env.PORT || 1416 "/>
					<outline text="};"/>
					</outline>
				<outline text="" created="Sat, 26 Apr 2025 18:21:34 GMT"/>
				<outline text="function myBackground () { //4/26/25 by DW -- make sure emailPrefs.json is in S3 location" created="Sat, 26 Apr 2025 18:29:55 GMT">
					<outline text="console.log (&quot;myBackground&quot;);" created="Sat, 26 Apr 2025 17:49:38 GMT"/>
					<outline text="" created="Sat, 26 Apr 2025 18:35:40 GMT"/>
					<outline text="const f = &quot;data/emailPrefs.json&quot;;" created="Sat, 26 Apr 2025 18:20:30 GMT"/>
					<outline text="const s3path = &quot;/scripting/davemaillist/emailPrefs.json&quot;;" created="Sat, 26 Apr 2025 18:21:34 GMT"/>
					<outline text="" created="Sat, 26 Apr 2025 19:00:45 GMT"/>
					<outline text="var lastJsontext;" created="Sat, 26 Apr 2025 18:31:04 GMT"/>
					<outline text="fs.readFile (f, function (err, jsontext) {" created="Sat, 26 Apr 2025 19:00:45 GMT">
						<outline text="if (err) {" created="Sat, 26 Apr 2025 19:01:33 GMT">
							<outline text="lastJsontext = &quot;&quot;;" created="Sat, 26 Apr 2025 19:01:43 GMT"/>
							<outline text="}" created="Sat, 26 Apr 2025 19:01:35 GMT"/>
							</outline>
						<outline text="else {" created="Sat, 26 Apr 2025 19:01:36 GMT">
							<outline text="lastJsontext = jsontext;" created="Sat, 26 Apr 2025 19:00:48 GMT"/>
							<outline text="}" created="Sat, 26 Apr 2025 19:01:38 GMT"/>
							</outline>
						<outline text="everyMinute ();"/>
						<outline text="utils.runEveryMinute (everyMinute);" created="Sat, 26 Apr 2025 17:49:02 GMT"/>
						<outline text="});" created="Sat, 26 Apr 2025 19:00:59 GMT"/>
						</outline>
					<outline text="" created="Sat, 26 Apr 2025 18:31:04 GMT"/>
					<outline text="function everyMinute () {" created="Sat, 26 Apr 2025 18:27:25 GMT">
						<outline text="console.log (&quot;everyMinute: &quot; + new Date ().toLocaleTimeString ());" isComment="true" created="Sat, 26 Apr 2025 17:49:38 GMT"/>
						<outline text="fs.readFile (f, function (err, jsontext) {" created="Sat, 26 Apr 2025 18:20:13 GMT">
							<outline text="if (err) {" created="Sat, 26 Apr 2025 18:20:26 GMT">
								<outline text="console.log (&quot;everyMinute: err.message == &quot; + err.message);" created="Sat, 26 Apr 2025 18:20:43 GMT"/>
								<outline text="}" created="Sat, 26 Apr 2025 18:20:54 GMT"/>
								</outline>
							<outline text="else {" created="Sat, 26 Apr 2025 18:21:01 GMT">
								<outline text="console.log (jsontext.length + &quot;, &quot; + lastJsontext.length);" isComment="true" created="Sat, 26 Apr 2025 18:20:43 GMT"/>
								<outline text="if (jsontext.length != lastJsontext.length) {" created="Sat, 26 Apr 2025 18:31:34 GMT">
									<outline text="s3.newObject (s3path, jsontext, &quot;application/json&quot;);" created="Sat, 26 Apr 2025 18:21:04 GMT"/>
									<outline text="console.log (&quot;everyMinute: &quot; + jsontext.length + &quot; chars in &quot; + f + &quot;. &quot; + new Date ().toLocaleTimeString ());" created="Sat, 26 Apr 2025 18:20:43 GMT"/>
									<outline text="lastJsontext = jsontext;"/>
									<outline text="}" created="Sat, 26 Apr 2025 18:31:42 GMT"/>
									</outline>
								<outline text="}" created="Sat, 26 Apr 2025 18:21:03 GMT"/>
								</outline>
							<outline text="});" created="Sat, 26 Apr 2025 18:20:23 GMT"/>
							</outline>
						<outline text="}" created="Sat, 26 Apr 2025 18:27:34 GMT"/>
						</outline>
					<outline text="}" created="Sat, 26 Apr 2025 18:30:04 GMT"/>
					</outline>
				<outline text="" created="Sat, 26 Apr 2025 18:29:55 GMT"/>
				<outline text="maillist.start (myConfig, function () {">
					<outline text="myBackground (); " created="Sat, 26 Apr 2025 18:29:56 GMT"/>
					<outline text="});"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script">
			<outline text="nodeEditorSuite.utilities.buildDaveMailList ()"/>
			</outline>
		</body>
	</opml>
